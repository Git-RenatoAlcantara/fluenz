// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String?
  password_hash String
  videos Video[]
  flashcard Flashcard[]
  quizz Quizz[]
  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt
  @@map("user")
}

model Video {
  id Int @id @default(autoincrement())
  url String @unique
  user User @relation(fields: [userId], references: [id])
  userId Int 
  last_view_at String?
  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt

  @@map("video")
}

model Flashcard {
  id Int @id @default(autoincrement())
  front String
  back String
  audioUrl String?
  user User @relation(fields: [userId], references: [id])
  userId Int
  next_review_at DateTime? @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt

  @@map("flashcard")
}

model Quizz {
  id Int @id @default(autoincrement())
  type String
  question String
  category String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  quizzOption QuizzOptions[]
  answer String?
  next_review_at DateTime? @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt
}

model QuizzOptions {
  id Int @id @default(autoincrement())
  quizz Quizz? @relation(fields: [quizzId], references: [id], onDelete: Cascade)
  quizzId Int?
  opt String
  isCorrect Boolean
  isSelected Boolean
}

